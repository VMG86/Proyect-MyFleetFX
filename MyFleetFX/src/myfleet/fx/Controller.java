/**
 * This the controller class to run all the actions while clicking on buttons or typing info
 * and is used to get the initial status and save changes on the app
 * @author vmatag
 * @version javaFx_1.0
 * @since 8
 */

package myfleet.fx;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import myfleet.data.GeneralCost;
import myfleet.data.Refueling;
import myfleet.data.Vehicle;

import java.io.*;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;

/**
 * This class contains everything necessary to manage the JavaFX application
 */
public class Controller implements Initializable
{

    @FXML
    private ListView<Vehicle> Lstv_Vehicles;
    @FXML
    private ComboBox Cbx_Action;
    @FXML
    private DatePicker Cal_ActionDate;
    @FXML
    private Label Lbl_LitterRefueled;
    @FXML
    private Slider Sld_Litters;
    @FXML
    private Label Lbl_PartialKms;
    @FXML
    private TextField Txt_Kms;
    @FXML
    private Label Lbl_TotalCost;
    @FXML
    private Label Lbl_Concept;
    @FXML
    private TextField Txt_Concept;
    @FXML
    private Label Lbl_PaidDate;
    @FXML
    private DatePicker Cal_PaidDate;
    @FXML
    private CheckBox Chk_Paid;
    @FXML
    private TextField Txt_Cost;
    @FXML
    private Button Btn_Save;

    static ArrayList<Vehicle> VehicleArrayList = new ArrayList<>();
    static ArrayList<Refueling> RefuelingArrayList = new ArrayList<>();
    static ArrayList<GeneralCost> GeneralCostArrayList = new ArrayList<>();
    Alert dialog = new Alert(Alert.AlertType.ERROR);
    /**
     * .txt used to save vehicles information
     */
    public static final String fileNameVehicles = "vehicles.txt";
    /**
     * .txt used to save refueling information
     */
    public static final String fileNameRefueling = "refueling.txt";
    /**
     * .txt used to save general cost information
     */
    public static final String fileNameGeneralCost = "general_cost.txt";
    private static BufferedReader loadFile = null;
    private static PrintWriter saveFile = null;

    /**
     * This method allows starting the application with some preset data
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle)
    {
        loadDataVehicles(VehicleArrayList);
        Cbx_Action.getItems().addAll("Refueling","General Cost");
        hideRefuelingData();
        hideGeneralCostData();
        Sld_Litters.setMin(0);
        Sld_Litters.setMax(50);
        Sld_Litters.setMajorTickUnit(10);
        Sld_Litters.setShowTickLabels(true);
        Txt_Cost.setVisible(false);
        Lbl_TotalCost.setVisible(false);
        Btn_Save.setVisible(false);

        for(int i = 0; i < VehicleArrayList.size(); i++)
        {
            Lstv_Vehicles.getItems().add(VehicleArrayList.get(i));
        }
    }

    /**
     * This method load data about vehicles from the .txt generated by previous uses of the app
     * @param VehicleArrayList > an array list with all the data about vehicles
     */
    public void loadDataVehicles(ArrayList<Vehicle> VehicleArrayList)
    {
        try
        {
            if((new File(fileNameVehicles)).exists())
            {
                loadFile = new BufferedReader(new FileReader(fileNameVehicles));

                String lineInfo = null;
                while ((lineInfo = loadFile.readLine()) != null)
                {
                    String[] data = lineInfo.split("@");

                    VehicleArrayList.add(new Vehicle(data[0], data[1], data[2], data[3], data[4], data[5],
                            Integer.parseInt(data[6])));
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }
        catch (Exception e) {
            errorMessage("Error", "Error while recovering data", e.getMessage());
        }finally {
            if(loadFile != null)
            {
                try
                {
                    loadFile.close();
                }
                catch (Exception e)
                {
                    errorMessage("Error", "Error while recovering data", e.getMessage());
                }
            }
        }
    }

    /**
     * If any error occurs, this method will inform about it with a pop up message
     * @param title > the title of the alert
     * @param text > the text that this pop will gonna show
     * @param content > the definition of the problem
     */
    public void errorMessage(String title,String text, String content)
    {
        dialog.setTitle(title);
        dialog.setHeaderText(text);
        dialog.setContentText(content);
        dialog.showAndWait();
    }

    /**
     * This method will change between the two actions available and it will show the text box, labels etc for
     * each one
     * @param actionEvent > even detected in the JavaFx app at action's combo box
     */
    public void changeAction(ActionEvent actionEvent)
    {
        if (Cbx_Action.getValue().equals("Refueling"))
        {
            showRefuelingData();
            hideGeneralCostData();
            showCommonData();
        }
        if (Cbx_Action.getValue().equals("General Cost"))
        {
            hideRefuelingData();
            showGeneralCostData();
            showCommonData();
        }

    }

    /**
     * Method in charge of saving data after registering it at the app
     * @param actionEvent > even detected in the JavaFx app at Save button
     */
    public void Save(ActionEvent actionEvent)
    {
        if (Cbx_Action.getValue().equals("Refueling"))
        {
            try
            {
                Vehicle vehicleSelected = Lstv_Vehicles.getSelectionModel().getSelectedItem();
                LocalDate actionDate = Cal_ActionDate.getValue();
                String date = actionDate.toString().substring(8) + actionDate.toString().substring(5,7)
                        + actionDate.toString().substring(0,4);
                double litters = Sld_Litters.getValue();
                double kms = Double.parseDouble(Txt_Kms.getText());
                double cost = Double.parseDouble(Txt_Cost.getText());

                RefuelingArrayList.add( new Refueling(date, vehicleSelected, litters,
                        kms, cost));
                saveDataRefueling(RefuelingArrayList);
            }
            catch (Exception e)
            {
                errorMessage("Error", "Error while saving, please review data introduced", e.getMessage());
            }
        }
        if (Cbx_Action.getValue().equals("General Cost"))
        {
            try
            {
                Vehicle vehicleSelected = Lstv_Vehicles.getSelectionModel().getSelectedItem();
                LocalDate actionDate = Cal_ActionDate.getValue();
                String date = actionDate.toString().substring(8) + actionDate.toString().substring(5,7)
                        + actionDate.toString().substring(0,4);
                String concept = Txt_Concept.getText();
                LocalDate paidDate = Cal_PaidDate.getValue();
                boolean isPaid = Chk_Paid.isSelected()? true: false;
                String dateOfPay = paidDate.toString().substring(8) + paidDate.toString().substring(5,7)
                        + paidDate.toString().substring(0,4);
                double cost = Double.parseDouble(Txt_Cost.getText());

                GeneralCostArrayList.add( new GeneralCost(date, vehicleSelected, concept,
                        cost, isPaid, dateOfPay));
                saveDataGeneralCost(GeneralCostArrayList);
            }
            catch (Exception e)
            {
                errorMessage("Error", "Error while saving, please review data introduced", e.getMessage());
            }
        }
    }

    private void hideRefuelingData()
    {
        Lbl_LitterRefueled.setVisible(false);
        Sld_Litters.setVisible(false);
        Lbl_PartialKms.setVisible(false);
        Txt_Kms.setVisible(false);

    }
    private void showRefuelingData()
    {
        Lbl_LitterRefueled.setVisible(true);
        Sld_Litters.setVisible(true);
        Lbl_PartialKms.setVisible(true);
        Txt_Kms.setVisible(true);
    }
    private void hideGeneralCostData()
    {
        Lbl_Concept.setVisible(false);
        Txt_Concept.setVisible(false);
        Lbl_PaidDate.setVisible(false);
        Chk_Paid.setVisible(false);
        Cal_PaidDate.setVisible(false);
    }
    private void showGeneralCostData()
    {
        Lbl_Concept.setVisible(true);
        Txt_Concept.setVisible(true);
        Lbl_PaidDate.setVisible(true);
        Chk_Paid.setVisible(true);
        Cal_PaidDate.setVisible(true);
    }

    private void showCommonData()
    {
        Lbl_TotalCost.setVisible(true);
        Txt_Cost.setVisible(true);
        Btn_Save.setVisible(true);
    }

    private void saveDataRefueling(ArrayList<Refueling> RefuelingArrayList)
    {
        try
        {
            saveFile = new PrintWriter(fileNameRefueling);

            for(int i = 0; i < RefuelingArrayList.size(); i++)
            {
                saveFile.println(RefuelingArrayList.get(i).toStockFormat());
            }

        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }catch (Exception e) {
            errorMessage("Error", "Error while saving", e.getMessage());
        }finally {
            if(saveFile != null)
            {
                saveFile.close();
            }
        }
    }

    private void saveDataGeneralCost(ArrayList<GeneralCost> RefuelingArrayList)
    {
        try
        {
            saveFile = new PrintWriter(fileNameGeneralCost);

            for(int i = 0; i < RefuelingArrayList.size(); i++)
            {
                saveFile.println(RefuelingArrayList.get(i).toStockFormat());
            }

        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }catch (Exception e) {
            errorMessage("Error", "Error while saving", e.getMessage());
        }finally {
            if(saveFile != null)
            {
                saveFile.close();
            }
        }
    }
}


